## Structure analysis pipeline
##
## This pipeline analyses protein structures using plip, tmalgin or makes a contact map.
##
## Rules
## -----
##

import os
import glob

ruleorder: download_rcsb > convert > move


## unzip
##    If you place zip files from alphafold3 in the data folder, this rule
##    extracts the structures.
##
checkpoint unzip:
  input: "data/{identifier}.zip"
  output:
    d=directory("data/{identifier}-unzipped")
  shell: "mkdir {output} -p; unzip {input} -d {output.d}"


## download_rcsb:
##    If a input file is missing, it is download with this rule.
##
checkpoint download_rcsb:
  output:
    "results/downloads/{identifier}.{ext}"
  shell:
    "wget -O {output} 'https://files.rcsb.org/download/{wildcards.identifier}.{wildcards.ext}' --no-check-certificate"


rule f:
  """
  This rule makes sure that the content of the AF3 folders gets detected.
  """
  input: rules.unzip.output.d
  output: "data/{identifier}-unzipped/{name}.cif"


def get_input(wildcards):
  """Determine the source of the input file

  branches:
    1) If the input file matches the name of a zip folder, then the
  folder gets unzipped, and the cif file gets extracted--assuming AF3 directory
  formats.
    2) File is present directly in the data folder. It gets moved directly to
  the input folder.
    3) The file needs to be downloaded.
  """
  # we find the file in the data folder
  final_target = wildcards.identifier
  final_format = wildcards.ext
  files = os.listdir("data")
  match = [f for f in files if wildcards.identifier.startswith(f.split(".")[0])]
  match = [f for f in files if f != ".gitkeep"]

  # If the model could be from AF3
  if "_model_" in wildcards.identifier:
    match = [f for f in match if f.startswith(wildcards.identifier.split("_model_")[0])]
  else:
    match = [f for f in match if f.startswith(wildcards.identifier)]
  if match:
    # file is local
    match = match.pop()
    if match.endswith("zip") and len(wildcards.identifier) != 4:
      unzip_ckp = checkpoints.unzip.get(identifier=match.replace(".zip", ""))
      print(unzip_ckp.output)
      final_target = f"{unzip_ckp.output[0]}/{wildcards.identifier}.{wildcards.ext}"
      return final_target
    else:
      final_target = f"data/{wildcards.identifier}"
    output = f"{final_target}.{final_format}"
  else:
    # We need to download the file
    download_rcsb_ckp = checkpoints.download_rcsb.get(**wildcards)
    output = download_rcsb_ckp.output
  return output


rule move:
  """
  This rule moves all data to the same folder, so the analysis
  rules are easier to write.
  """
  input: get_input
  output: "results/input/{identifier}.{ext}"
  shell: "cp {input} {output}"


rule convert:
  """Convert a structure using biopython
  """
  conda: 'envs/comparison.yml'
  input: "results/input/{identifier}.cif"
  output: "results/input/{identifier}.pdb"
  shell: "python3 workflow/scripts/convert-cf-to-pdb.py {input} {output}"


## plip:
##    Run the plip programme on the input data-file to determine the protein
##    ligand interactions.
##
rule plip:
  # threads: 8
  container:
    "docker://pharmai/plip:2.3.0-multi"
  input:
    "results/input/{identifier}.pdb"
  output:
    directory("results/plip/{identifier}"),
  shell:
    """
    python3 /src/plip/plipcmd.py  -f {input} -o {output} -yvxtp
    """

rule install:
  output: touch("results/checkpoints/install_{dep}")
  shell:
    """
    touch  {output}
    cd workflow/scripts/dependencies/{wildcards.dep}/
    unset PIXI_PROJECT_MANIFEST
    pixi install
    """


## extract_b_factor:
##    Extract the b factor column.
## 
rule extract_b_factor:
  conda:
    "envs/mol.yml"
  input:
    "results/input/{identifier}.pdb"
  output:
    "results/mol/{identifier}.bfactor.png",
    "results/mol/{identifier}.bfactor.csv",
  script:
    "scripts/molecule/beta-factor.py"


## determine_accesability_profile:
##    Calculate the accessability profile of the calculated structures.
## 
rule determine_accessability_profile:
  conda:
    "envs/mol.yml"
  input:
    "results/input/{identifier}.pdb"
  output:
    "results/mol/{identifier}.sasa.png",
    "results/mol/{identifier}.sasa.csv",
  script:
    "scripts/molecule/surface.py"


## calculate_clashes:
##    Determine the number of steric clashes.
## 
rule calculate_clashes:
  conda:
    "envs/mol.yml"
  input:
    "results/input/{identifier}.pdb"
  output:
    "results/mol/{identifier}.clashes.csv",
  script:
    "scripts/molecule/steric_clashes.py"


## fasta:
##    Determine the primary structure of a protein.
##
rule fasta:
  conda: 'envs/comparison.yml'
  input: "results/input/{identifier}.pdb"
  output: "results/fasta/{identifier}.fasta"
  params:
    script=workflow.source_path("scripts/pdb2fasta.py")
  shell:
    """
    python3 {params.script} {input} {output}
    """

## ramachandran_data:
##    Calculate the ramachandran.
##
rule ramachandran_data:
  input:
    data="results/input/{identifier}.pdb",
    ckp="results/checkpoints/git",
    install="results/checkpoints/install_Stereochemical-Assesments"
  output: "results/ramachandran/{identifier}.tsv"
  shell:
    """
    cd workflow/scripts/dependencies/Stereochemical-Assesments/
    unset PIXI_PROJECT_MANIFEST
    pixi run python extract_angles.py -i ../../../../{input.data} -o  ../../../../{output}
    """

## ramachandran_plot:
##    Make the ramachandran plot.
##
rule ramachandran_plot:
  input:
    data="results/ramachandran/{identifier}.tsv",
    ckp="results/checkpoints/git",
    install="results/checkpoints/install_Stereochemical-Assesments"
  output: "results/ramachandran/{identifier}.png"
  shell:
    """
    cd workflow/scripts/dependencies/Stereochemical-Assesments/
    unset PIXI_PROJECT_MANIFEST
    pixi run python plot.py -i ../../../../{input.data} -o  ../../../../{output} --type --legend
    """


## contact_map:
##    Calculate the contact map of a structure.
##
rule contact_map:
  input:
    data="results/input/{identifier}.pdb",
    ckp="results/checkpoints/git",
    install="results/checkpoints/install_distance-map"
  output: directory("results/contact-map/{identifier}")
  shell:
    """
    mkdir {output} -p
    cd workflow/scripts/dependencies/distance-map/
    unset PIXI_PROJECT_MANIFEST
    pixi run map  ../../../../{input.data} ../../../../{output}
    """

rule crop:
  conda: 'envs/comparison.yml'
  input: "results/comparison/{x}-{y}.usalign.sup.png"
  output: "results/comparison/{x}-{y}.usalign.sup.crop.png"
  shell:
    """
    magick {input} -trim +repage {output}
    """

## tm:
##    Run the a programme from the tm family.
##
rule tm_align:
  conda: 'envs/comparison.yml'
  input:
    x="results/input/{x}.pdb",
    y="results/input/{y}.pdb"
  output: "results/comparison/{x}-{y}.tm{type}.txt"
  shell: "TM{wildcards.type} {input.x} {input.y} > {output}; cat {output}"

## mm:
##    Run a MM family programme.
##
rule mm_align:
  container:
    "docker://edraizen/mmalign:latest"
  input:
    x="results/input/{x}.pdb",
    y="results/input/{y}.pdb"
  output: "results/comparison/{x}-{y}.mmalign.txt"
  shell:
    """
     /opt/MMalign/MMalign {input.x} {input.y} > {output}; cat {output} 
    """


rule us_align:
  container:
    "docker://f1lem0n/usalign:latest"
  input:
    x="results/input/{x}.pdb",
    y="results/input/{y}.pdb"
  output: "results/comparison/{x}-{y}.usalign.txt"
  params:
    ter="0",
    mm="1",
  shell:
    """
     USalign {input.x} {input.y} -mm {params.mm} -ter {params.ter} > {output}; cat {output}
    """

rule us_align_sup:
  container:
    "docker://f1lem0n/usalign:latest"
  input:
    x="results/input/{x}.pdb",
    y="results/input/{y}.pdb"
  output: 
    dir=directory("results/comparison/{x}-{y}.usalign.sup"),
  params:
    ter="0",
    mm="1",
  shell:
    """
     USalign {input.x} {input.y} -mm {params.mm} -ter {params.ter} -o sup_{wildcards.x}_{wildcards.y}
     mkdir {output} -p
     mv sup_{wildcards.x}_{wildcards.y}* {output.dir}
    """

rule us_align_pymol_session:
  input: 
    x="results/input/{x}.pdb",
    y="results/input/{y}.pdb",
    superposition="results/comparison/{x}-{y}.usalign.sup"
  output: "results/comparison/{x}-{y}.usalign.sup.pse"
  conda: 'envs/comparison.yml'
  shell:
    """
    cp {input.x} {wildcards.x}.pdb 2>/dev/null
    cp {input.y} {wildcards.y}.pdb 2>/dev/null
    cp {input.superposition}/*pdb . 2>/dev/null
    # Modify the outputscript of USalign to make pymol sessions...
    cp {input}/sup_{wildcards.x}_{wildcards.y}_all_atm.pml .  2>/dev/null
    mv sup_{wildcards.x}_{wildcards.y}_all_atm.pml ses_sup_{wildcards.x}_{wildcards.y}_all_atm.pml
    echo "save {output}" >> ses_sup_{wildcards.x}_{wildcards.y}_all_atm.pml
    pymol -c -d @ses_sup_{wildcards.x}_{wildcards.y}_all_atm.pml
    # Cleaning up
    rm  {wildcards.x}.pdb 2>/dev/null
    rm  {wildcards.y}.pdb 2>/dev/null
    rm sup_{wildcards.x}_{wildcards.y}.pdb 2>/dev/null
    rm ses_sup_{wildcards.x}_{wildcards.y}_all_atm.pml 2>/dev/null
    """

  
rule us_align_pymol_picture:
  input: 
    x="results/input/{x}.pdb",
    y="results/input/{y}.pdb",
    superposition="results/comparison/{x}-{y}.usalign.sup"
  output: "results/comparison/{x}-{y}.usalign.sup.png"
  conda: 'envs/comparison.yml'
  shell:
    """
    cp {input.x} {wildcards.x}.pdb 2>/dev/null
    cp {input.y} {wildcards.y}.pdb 2>/dev/null
    cp {input.superposition}/*pdb .  2>/dev/null
    pymol -c -d @{input}/sup_{wildcards.x}_{wildcards.y}_all_atm.pml \
      -W 2000 -H 2000 \
      -g {wildcards.x}-{wildcards.y}.usalign.sup.png \

    rm  {wildcards.x}.pdb 2>/dev/null
    rm  {wildcards.y}.pdb 2>/dev/null
    rm sup_{wildcards.x}_{wildcards.y}.pdb  2>/dev/null
    mv {wildcards.x}-{wildcards.y}.usalign.sup.png {output} 
    """

## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell: "sed -n 's/^##//p' {input}"


## clean:
##    Clean all outputs from the results folder.
##
rule clean:
  shell: "rm -rf results/*"


## build_overview:
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.dot"
  shell:
    """
    snakemake -c 1 --forceall --dag > {output}
    """


## build_overview:
##    Print the directed acyclic graph.
##
rule plot_overview:
  input: "results/method.dot"
  output:
    "results/method.dot.{fileformat}"
  shell:
    """
    cat {input} | dot -T{wildcards.fileformat} > {output}
    """


## build_overview_ascii:
##    Prints the graph in ascii format.
##
rule build_ascii_graph:
  container: "docker://kubler/graph-easy:latest"
  input: "results/method.dot"
  output:
    "results/method-simple.ascii"
  shell:
    """
    cat {input} |  graph-easy --from=dot --as_ascii out >  {output}
    """


rule git_prep:
  output: touch("results/checkpoints/git")
  shell:
    """
    git submodule init; git submodule update
    """
