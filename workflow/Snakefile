## <NAME>
## 
## DESCRIPTION
## 
## Rules
## -----
##

onstart:
    print("##### running pipeline  #####\n") 
    # shell("mkdir -p jobs/printContent")

# rule all:
#
rule all:
  input:
    expand("results/output/{number}.txt", number = range(1, 10))


## test:
##    A rule that makes a file and then sleeps for 10 seconds.
rule test:
  # threads: 8
  output:
    "results/output/{number}.txt"
  shell:
    """
    echo "makeing {output}"
    mkdir -p results/output;
    touch {output}
    sleep 10
    """

rule docker_tidyverse:
    output:
        "results/myplot.png"
    container:
        "docker://rocker/tidyverse:latest"
    shell:
        """
        R -e "library(tidyverse); dist = rnorm(1000); ggplot(data = tibble(x=dist), aes(x=x)) + geom_histogram(); ggsave('{output}')"
        """

# A rule that uses gpu's
# ## colabfold:
# ##    Calculate the protein structures of the fasta files using Colabfold.
# ##
# rule colabfold:
#   conda:
#     "envs/fold.yml"
#   input:
#     fasta="results/data/{protein_complex}/subunits/fasta-{grouping}/{fasta_file}.fasta",
#     cuda="results/checkpoints/setup_cuda"
#   resources:
#     mem_mb=32000,
#     slurm_extra= "'--gres=gpu:a100:1'",
#     constraint="gpu",
#     tasks="1",
#     cpus_per_task=10,
#     mem="30G",
#     slurm_partition='gpu1',
#     runtime='1440',
#     slurm_account="mpmp_gpu",
#   # threads: 10
#   params:
#     number_of_models=config['colabfold']['number_of_models']
#   output:
#     directory("results/data/{protein_complex}/subunits/processed-{grouping}/{fasta_file}")
#   shell:
#     """
#     echo "Starting colabfold, please see {output}/log.txt for the log"
#     colabfold_batch {input.fasta} {output} --num-models {params.number_of_models}
#     """
#


## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell: "sed -n 's/^##//p' {input}"

## clean:                     
##    Clean all outputs from the results folder.
##
rule clean:
  shell: "rm -rf results/*"

## build_overview:            
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """

rule install_easy_graph:
  conda:
    "envs/utils.yml"
  output:
    touch("results/checkpoints/install_easy_graph")
  shell:
    """
    echo "Installing easy graph"
    cpan -i App::cpanminus
    cpanm Graph::Easy
    """

## build_overview_ascii:
##    Prints the graph in ascii format.
rule build_ascii_graph:
  conda:
    "envs/utils.yml"
  input:
    "results/checkpoints/install_easy_graph"
  output:
    "results/method-simple.ascii"
  shell:
    """
    snakemake -c 1 --forceall --dag > out
    graph-easy --from=dot --as_ascii out >  {output}
    rm out
    """
