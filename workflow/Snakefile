## Structure analysis pipeline
##
## This pipeline analyses protein structures using plip, tmalgin or makes a contact map.
##
## Rules
## -----
##

import os
import glob

ruleorder: download_rcsb > convert > move


## unzip
##    If you place zip files from alphafold3 in the data folder, this rule
##    extracts the structures.
##
checkpoint unzip:
  input: "data/{identifier}.zip"
  output:
    d=directory("data/{identifier}-unzipped")
  shell: "mkdir {output} -p; unzip {input} -d {output.d}"


## download_rcsb:
##    If a input file is missing, it is download with this rule.
##
checkpoint download_rcsb:
  output:
    "results/downloads/{identifier}.{ext}"
  shell:
    "wget -O {output} 'https://files.rcsb.org/download/{wildcards.identifier}.{wildcards.ext}' --no-check-certificate"


rule f:
  """
  This rule makes sure that the content of the AF3 folders gets detected.
  """
  input: rules.unzip.output.d
  output: "data/{identifier}-unzipped/{name}.cif"


def get_input(wildcards):
  """Determine the source of the input file

  branches:
    1) If the input file matches the name of a zip folder, then the
  folder gets unzipped, and the cif file gets extracted--assuming AF3 directory
  formats.
    2) File is present directly in the data folder. It gets moved directly to
  the input folder.
    3) The file needs to be downloaded.
  """
  # we find the file in the data folder
  final_target = wildcards.identifier
  final_format = wildcards.ext
  files = os.listdir("data")
  match = [f for f in files if wildcards.identifier.startswith(f.split(".")[0])]

  if match:
    # file is local
    match = match.pop()
    if match.endswith("zip"):
      unzip_ckp = checkpoints.unzip.get(identifier=match.replace(".zip", ""))
      final_target = f"{unzip_ckp.output[0]}/{wildcards.identifier}"
    else:
      final_target = f"data/{wildcards.identifier}"
    output = f"{final_target}.{final_format}"
  else:
    # We need to download the file
    download_rcsb_ckp = checkpoints.download_rcsb.get(**wildcards)
    output = download_rcsb_ckp.output

  return output


rule move:
  """
  This rule moves all data to the same folder, so the analysis
  rules are easier to write.
  """
  input: get_input
  output: temp("results/input/{identifier}.{ext}")
  shell: "cp {input} {output}"


rule convert:
  conda: 'envs/comparison.yml'
  input: "results/input/{identifier}.cif"
  output: temp("results/input/{identifier}.pdb")
  shell: "python3 workflow/scripts/convert-cf-to-pdb.py {input} {output}"


## plip:
##    Run the plip programme on the input data-file to determine the protein
##    ligand interactions.
##
rule plip:
  # threads: 8
  container:
    "docker://pharmai/plip:2.3.0-multi"
  input:
    "results/input/{identifier}.pdb"
  output:
    directory("results/plip/{identifier}"),
  shell:
    """
    python3 /src/plip/plipcmd.py  -f {input} -o {output} -yvxtp
    """

## contact_map:
##    Calculate the contact map of a structure.
##
rule contact_map:
  input: "results/input/{identifier}.pdb"
  output: directory("results/contact-map/{identifier}")
  shell:
    """
    mkdir {output} -p
    cd workflow/scripts/dependencies/distance-map/
    unset PIXI_PROJECT_MANIFEST
    pixi run map  ../../../../{input} {output}
    """

## tm:
##    Run the a programme from the tm family.
##
rule tm_align:
  conda: 'envs/comparison.yml'
  input:
    x="results/input/{x}.pdb",
    y="results/input/{y}.pdb"
  output: "results/tm/{x}-{y}.{type}.txt"
  shell: "TM{wildcards.type} {input.x} {input.y} > {output}; cat {output}"


## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell: "sed -n 's/^##//p' {input}"


## clean:
##    Clean all outputs from the results folder.
##
rule clean:
  shell: "rm -rf results/*"


## build_overview:
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.dot"
  shell:
    """
    snakemake -c 1 --forceall --dag > {output}
    """


## build_overview:
##    Print the directed acyclic graph.
##
rule plot_overview:
  input: "results/method.dot"
  output:
    "results/method.dot.{fileformat}"
  shell:
    """
    cat {input} | dot -T{wildcards.fileformat} > {output}
    """


## build_overview_ascii:
##    Prints the graph in ascii format.
##
rule build_ascii_graph:
  container: "docker://kubler/graph-easy:latest"
  input: "results/method.dot"
  output:
    "results/method-simple.ascii"
  shell:
    """
    cat {input} |  graph-easy --from=dot --as_ascii out >  {output}
    """


rule git_prep:
  output: touch("results/checkpoints/git")
  shell:
    """
    git submodule init; git submodule update
    git submodule update --remote --merge
    """
